This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  app.vue
assets/
  css/
    tailwind.css
components/
  canvas/
    MindMapNode.vue
  icon/
    CloseIcon.vue
    HeartIcon.vue
    Logo.vue
  landing/
    FeaturesSection.vue
    HeroSection.vue
    LandingHeader.vue
  modals/
    BaseModal.vue
  ui/
    Button.vue
  Header.vue
  SearchCard.vue
composables/
  useMindMapLayout.ts
layouts/
  blank.vue
  default.vue
middleware/
  auth.global.ts
pages/
  app.vue
  index.vue
  login.vue
  register.vue
plugins/
  click-outside.ts
  supabase.client.ts
public/
  robots.txt
stores/
  mindMapStore.ts
types/
  components.d.ts
  global.d.ts
  imports.d.ts
  nuxt-app.d.ts
  nuxt-config.d.ts
  nuxt.d.ts
  supabase.d.ts
  supabase.ts
  tailwind.d.ts
  v-click-outside.d.ts
  vue-flow-controls.d.ts
.env.example
.gitignore
components.d.ts
nuxt.config.ts
nuxt.tsconfig.json
package.json
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/icon/HeartIcon.vue">
<template>
  <svg
    width="32"
    height="32"
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M26 18.096L16 28L12.1386 24.176M3.98263 13.3706C3.97149 11.9644 4.40529 10.5907 5.22199 9.44596C6.03869 8.3012 7.19647 7.444 8.52976 6.99696C9.86304 6.54992 11.3035 6.53593 12.6453 6.95699C13.987 7.37805 15.1612 8.2126 16 9.34129C16.5513 8.60798 17.2481 7.99638 18.0468 7.54476C18.8454 7.09314 19.7286 6.81122 20.6412 6.71665C21.5538 6.62208 22.4761 6.71689 23.3503 6.99514C24.2246 7.2734 25.032 7.72912 25.722 8.33377C26.4121 8.93843 26.9699 9.679 27.3605 10.5091C27.7512 11.3393 27.9663 12.2411 27.9924 13.1582C28.0185 14.0753 27.855 14.9879 27.5121 15.839C27.1693 16.69 26.6545 17.4611 26 18.104"
      stroke="#8E6CE4"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
    <path
      d="M4 17.3333H6.66667L9.33333 21.3333L12 13.3333L13.3333 17.3333H17.3333"
      stroke="#8E6CE4"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
  </svg>
</template>
</file>

<file path="composables/useMindMapLayout.ts">
import type { Node, Edge, XYPosition } from "@vue-flow/core";

type LayoutOpts = {
  rootId: string;
  levelGap?: number; // distância horizontal entre níveis
  rowGap?: number; // distância vertical entre irmãos
  center?: XYPosition; // onde posicionar o root
};

export function layoutMindMap(
  nodes: Node[],
  edges: Edge[],
  opts: LayoutOpts
): Node[] {
  const levelGap = opts.levelGap ?? 280;
  const rowGap = opts.rowGap ?? 100;
  const center = opts.center ?? { x: 200, y: 200 };

  // Índices rápidos
  const children = new Map<string, string[]>();
  edges.forEach((e) => {
    const list = children.get(e.source) ?? [];
    list.push(e.target);
    children.set(e.source, list);
  });

  // BFS por níveis
  const levels: string[][] = [];
  const q = [[opts.rootId, 0] as [string, number]];
  const seen = new Set<string>();
  while (q.length) {
    const [id, lvl] = q.shift()!;
    if (seen.has(id)) continue;
    seen.add(id);
    if (!levels[lvl]) levels[lvl] = [];
    levels[lvl].push(id);
    for (const c of children.get(id) ?? []) q.push([c, lvl + 1]);
  }

  // Posicionar root
  const positioned = new Map<string, XYPosition>();
  positioned.set(opts.rootId, { x: center.x, y: center.y });

  // Para cada nível, empilhe filhos em coluna vertical
  for (let lvl = 1; lvl < levels.length; lvl++) {
    const ids = levels[lvl];
    // Agrupar por pai p/ manter irmãos juntos
    const groups = new Map<string, string[]>();
    ids.forEach((id) => {
      const edge = edges.find((e) => e.target === id);
      if (!edge) return;
      const arr = groups.get(edge.source) ?? [];
      arr.push(id);
      groups.set(edge.source, arr);
    });

    for (const [parentId, group] of groups) {
      const parentPos = positioned.get(parentId) ?? center;
      const x = parentPos.x + levelGap;

      // Distribui irmãos ao redor da linha do pai
      const totalHeight = (group.length - 1) * rowGap;
      const startY = parentPos.y - totalHeight / 2;
      group.forEach((id, idx) => {
        positioned.set(id, { x, y: startY + idx * rowGap });
      });
    }
  }

  // Retorna nós com nova position (sem mexer no resto do data)
  return nodes.map((n) => {
    const p = positioned.get(n.id);
    return p ? { ...n, position: p, draggable: true } : n;
  });
}
</file>

<file path="app/app.vue">
<template>
  <div class="min-h-screen bg-gray-50">
    <NuxtLayout>
      <NuxtPage />
    </NuxtLayout>
  </div>
</template>

<style>
@import '~/assets/css/tailwind.css';
</style>
</file>

<file path="assets/css/tailwind.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="components/canvas/MindMapNode.vue">
<template>
  <div
    class="group relative w-64 select-none"
    @mouseenter="isHovered = true"
    @mouseleave="isHovered = false"
    tabindex="0"
  >
    <Handle
      type="source"
      :position="Position.Right"
      :style="{ opacity: 0, pointerEvents: 'none' }"
    />
    <Handle
      type="target"
      :position="Position.Left"
      :style="{ opacity: 0, pointerEvents: 'none' }"
    />
    <!-- ROOT: sempre card -->
    <div
      v-if="data.isRoot"
      class="p-4 rounded-lg bg-[#1d1d1f] border border-gray-800 shadow-lg transition-all duration-200 flex items-start gap-3 border-l-4 border-l-amber-500"
      :class="{
        'border-blue-500 border-2': selected,
        'hover:border-blue-400': !selected,
      }"
    >
      <!-- Input connection point (left) -->
      <div
        class="absolute w-3 h-3 bg-white rounded-full border-2 border-indigo-600 top-1/2 -translate-y-1/2 opacity-0 transition-opacity pointer-events-none group-hover:opacity-100 group-focus-visible:opacity-100 left-[-6px]"
      />

      <!-- Node content -->
      <div class="flex-1 min-w-0">
        <div class="flex items-center mb-1">
          <div class="mr-2 flex items-center" v-if="data.iconName">
            <component
              :is="getIconComponent(data.iconName)"
              v-if="getIconComponent(data.iconName)"
            />
          </div>
          <div class="font-semibold text-sm flex-grow">
            {{ data.label || label }}
          </div>
          <button
            v-if="hasChildren"
            @click.stop="toggle"
            class="w-5 h-5 rounded-full bg-white/10 border-0 text-white flex items-center justify-center cursor-pointer text-sm leading-none transition-all ml-2 hover:bg-white/20"
            :class="{ 'is-expanded': isExpanded }"
          >
            {{ isExpanded ? "−" : "+" }}
          </button>
        </div>
        <div class="text-xs opacity-90 mt-1" v-if="data.description">
          {{ data.description }}
        </div>
      </div>

      <!-- Output connection point (right) -->
      <div
        class="absolute w-3 h-3 bg-white rounded-full border-2 border-indigo-600 top-1/2 -translate-y-1/2 opacity-0 transition-opacity pointer-events-none group-hover:opacity-100 group-focus-visible:opacity-100 right-[-6px]"
      />
    </div>

    <!-- NÃO-ROOT: lightweight por padrão, card no hover/focus -->
    <div v-else class="w-64">
      <!-- Lightweight (texto simples) -->
      <span
        class="block text-sm text-neutral-300/90 leading-snug truncate group-hover:hidden group-focus-visible:hidden"
      >
        {{ data.label || label }}
      </span>

      <!-- Card no hover/focus -->
      <div
        class="hidden group-hover:flex group-focus-visible:flex p-3 rounded-lg bg-[#1d1d1f] border border-gray-800 shadow-lg transition-all duration-200 items-start gap-2"
        :class="{
          'border-blue-500 border-2': selected,
          'hover:border-blue-400': !selected,
        }"
      >
        <!-- Input connection point (left) -->
        <div
          class="absolute w-3 h-3 bg-white rounded-full border-2 border-indigo-600 top-1/2 -translate-y-1/2 opacity-0 transition-opacity pointer-events-none group-hover:opacity-100 group-focus-visible:opacity-100 left-[-6px]"
        />

        <!-- Node content -->
        <div class="flex-1 min-w-0">
          <div class="flex items-center mb-1">
            <div class="mr-2 flex items-center" v-if="data.iconName">
              <component
                :is="getIconComponent(data.iconName)"
                v-if="getIconComponent(data.iconName)"
              />
            </div>
            <div class="font-semibold text-sm flex-grow">
              {{ data.label || label }}
            </div>
            <button
              v-if="hasChildren"
              @click.stop="toggle"
              class="w-5 h-5 rounded-full bg-white/10 border-0 text-white flex items-center justify-center cursor-pointer text-sm leading-none transition-all ml-2 hover:bg-white/20"
              :class="{ 'is-expanded': isExpanded }"
            >
              {{ isExpanded ? "−" : "+" }}
            </button>
          </div>
          <div class="text-xs opacity-90 mt-1" v-if="data.description">
            {{ data.description }}
          </div>
          <div class="mt-2 flex gap-2">
            <button
              v-if="data.onPrimary"
              class="rounded-md bg-white/10 px-2 py-1 text-xs hover:bg-white/20 text-white"
              @click.stop="data.onPrimary?.()"
            >
              Pesquisar categoria
            </button>
          </div>
        </div>

        <!-- Output connection point (right) -->
        <div
          class="absolute w-3 h-3 bg-white rounded-full border-2 border-indigo-600 top-1/2 -translate-y-1/2 opacity-0 transition-opacity pointer-events-none group-hover:opacity-100 group-focus-visible:opacity-100 right-[-6px]"
        />
      </div>
    </div>
  </div>
</template>

<script setup>
// Auto-imported in Nuxt 3: ref, computed, nextTick, defineAsyncComponent

// Use Vue Flow and store
const { useVueFlow } = await import("@vue-flow/core");
const { useMindMapStore } = await import("~/stores/mindMapStore");
const { Handle, Position } = await import("@vue-flow/core");

const isHovered = ref(false);
const store = useMindMapStore();
const { updateNodeInternals } = useVueFlow();

// Simple icon component resolution
const getIconComponent = (iconName) => {
  if (!iconName) return null;

  if (iconName === "heart") {
    return defineAsyncComponent({
      loader: () => import("~/components/icon/HeartIcon.vue"),
      loadingComponent: { template: "<div></div>" },
      delay: 200,
      timeout: 3000,
    });
  }
  return null;
};

// Component props
const props = defineProps({
  id: {
    type: String,
    required: true,
  },
  data: {
    type: Object,
    required: true,
    default: () => ({
      isRoot: false,
      isExpanded: false,
      children: [],
    }),
  },
  label: {
    type: String,
    default: "",
  },
  type: {
    type: String,
    default: "default",
  },
  selected: {
    type: Boolean,
    default: false,
  },
  isConnectable: {
    type: Boolean,
    default: true,
  },
  position: {
    type: Object,
    required: true,
    default: () => ({ x: 0, y: 0 }),
  },
  // Vue Flow connection points
  sourcePosition: {
    type: String,
    default: "right",
  },
  targetPosition: {
    type: String,
    default: "left",
  },
});

// Computed properties
const hasChildren = computed(() => {
  return props.data?.children?.length > 0;
});

const isExpanded = computed(() => {
  return !!props.data?.isExpanded;
});

const isRoot = computed(() => !!props.data?.isRoot);

// Toggle node expansion
const toggle = () => {
  store.toggleNode(props.id);
  // Force Vue Flow to recalculate after state change
  nextTick(() => {
    updateNodeInternals();
  });
};

// Expose connection points for Vue Flow
const connectionPoints = {
  source: "right",
  target: "left",
};

defineExpose({
  connectionPoints,
});
</script>

<style scoped>
.vue-flow__edge-path {
  pointer-events: none;
}
</style>
</file>

<file path="components/icon/CloseIcon.vue">
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    class="w-6 h-6"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M6 18L18 6M6 6l12 12"
    />
  </svg>
</template>
</file>

<file path="components/icon/Logo.vue">
<template>
  <svg
    width="72"
    height="66"
    viewBox="0 0 72 66"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M43.0052 0.219238H62.2084C62.7981 0.219377 63.3413 0.551381 63.6029 1.08252L71.2904 16.3989C71.3272 16.4719 71.3547 16.548 71.3793 16.6245C71.3887 16.6537 71.3989 16.6827 71.4066 16.7124C71.4131 16.7376 71.418 16.7631 71.4232 16.7886C71.4284 16.8138 71.4329 16.8392 71.4369 16.8647C71.4416 16.8953 71.4458 16.9258 71.4486 16.9565C71.4509 16.9806 71.4523 17.0046 71.4535 17.0288C71.4548 17.0581 71.4558 17.0874 71.4554 17.1167C71.4552 17.1492 71.4529 17.1817 71.4506 17.2144C71.4491 17.2339 71.4488 17.2535 71.4467 17.2729C71.4293 17.4312 71.3881 17.5898 71.3197 17.7427L55.1332 53.7192C55.0613 53.883 54.9623 54.0385 54.8314 54.1753L44.1166 65.3003C43.8236 65.6049 43.4173 65.7769 42.9916 65.7769H18.1791C17.847 65.7769 17.5267 65.6714 17.2611 65.4761L6.77673 57.8472C6.77225 57.8439 6.76847 57.8397 6.76404 57.8364C6.72733 57.809 6.69158 57.7808 6.65759 57.7505C6.65224 57.7457 6.64724 57.7406 6.64197 57.7358C6.61168 57.7081 6.582 57.6799 6.55408 57.6499C6.54158 57.6366 6.5299 57.6226 6.51794 57.6089C6.49671 57.5844 6.4751 57.5604 6.45544 57.5347C6.44088 57.5157 6.42803 57.4956 6.41443 57.4761C6.39968 57.4549 6.38514 57.4336 6.37146 57.4116C6.35602 57.3869 6.34147 57.3618 6.32751 57.3364C6.31743 57.318 6.30756 57.2996 6.29822 57.2808C6.28051 57.2452 6.26426 57.2091 6.24939 57.1724C6.24594 57.1638 6.24195 57.1556 6.23865 57.147C6.22505 57.1116 6.21349 57.0757 6.20251 57.0396C6.19886 57.0275 6.19416 57.0156 6.1908 57.0034L0.600952 36.7378C0.487718 36.3239 0.550384 35.8784 0.772827 35.5112L17.5463 7.90576C17.7494 7.56987 18.0736 7.32373 18.4486 7.21436L42.5101 0.293457C42.5664 0.275395 42.6242 0.261179 42.683 0.249512C42.7226 0.241357 42.7625 0.235941 42.8021 0.230957C42.8122 0.229752 42.8222 0.227085 42.8324 0.226074C42.8902 0.219968 42.9479 0.218825 43.0052 0.219238ZM11.0677 57.105L18.6869 62.6519H42.3236L50.7953 53.856L34.9652 49.1382L11.0677 57.105ZM19.8939 10.0454L3.78943 36.5542H3.79236L8.76501 54.5806L33.9291 46.1938L49.9525 20.8237L42.1244 3.65479L19.8939 10.0454ZM52.6879 22.3374L37.3676 46.5913L52.8392 51.2036L67.2064 19.2651L52.6879 22.3374ZM52.6273 19.1587L67.5912 15.9927L61.2426 3.34424H45.4183L52.6273 19.1587Z"
      fill="white"
    />
  </svg>
</template>

<script>
export default {
  name: "Logo",
};
</script>
</file>

<file path="components/landing/FeaturesSection.vue">
<template>
  <section
    class="w-full flex flex-col items-center py-12 px-4 md:px-12 bg-[#18181B]"
  >
    <div class="max-w-4xl w-full text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">
        Conheça nossos recursos
      </h2>
      <p class="text-lg md:text-xl text-gray-300">
        Descubra como nossas funcionalidades podem impulsionar sua experiência.
      </p>
    </div>
    <div class="w-full grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      <div
        v-for="(feature, idx) in features"
        :key="idx"
        class="bg-[#23232A] rounded-xl p-8 flex flex-col items-center border border-[#353542] shadow-lg transition hover:scale-[1.03] hover:border-primary-500"
      >
        <div class="w-full flex justify-center mb-6">
          <div
            class="w-20 h-20 flex items-center justify-center bg-[#2d2d38] rounded-lg overflow-hidden border border-[#353542]"
          >
            <template v-if="feature.visual">
              <img
                v-if="isImage(feature.visual)"
                :src="feature.visual"
                alt="Visual da feature"
                class="object-contain w-full h-full"
                loading="lazy"
              />
              <video
                v-else-if="isVideo(feature.visual)"
                :src="feature.visual"
                class="object-contain w-full h-full"
                autoplay
                muted
                loop
                playsinline
              />
              <span v-else class="text-gray-500 text-xs">Visual</span>
            </template>
            <template v-else>
              <svg
                class="w-8 h-8 text-gray-500"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M12 4v16m8-8H4"
                />
              </svg>
            </template>
          </div>
        </div>
        <h3 class="text-xl font-semibold text-white mb-2 text-center">
          {{ feature.title }}
        </h3>
        <p class="text-gray-300 text-base text-center">
          {{ feature.description }}
        </p>
      </div>
    </div>
  </section>
</template>

<script setup>
defineProps({
  features: {
    type: Array,
    required: true,
    default: () => [],
  },
});

function isImage(src) {
  return typeof src === "string" && /\.(jpe?g|png|gif|webp|svg)$/i.test(src);
}
function isVideo(src) {
  return typeof src === "string" && /\.(mp4|webm|ogg)$/i.test(src);
}
</script>

<style scoped>
/* Nenhum estilo adicional necessário, todo o layout usa Tailwind */
</style>
</file>

<file path="components/modals/BaseModal.vue">
<template>
  <Teleport :to="teleportTarget">
    <Transition name="modal-fade">
      <div
        v-if="isOpen"
        class="absolute inset-0 z-[30] flex items-center justify-center p-6 bg-black bg-opacity-70"
        @click.self="handleBackdropClick"
        role="dialog"
        aria-modal="true"
        :aria-labelledby="
          $slots.header && title ? 'base-modal-title-slot' : undefined
        "
      >
        <div
          :class="[
            'base-modal-container flex flex-col bg-[#171717] border border-[#343434] rounded-lg shadow-xl text-white overflow-hidden relative',
            modalSizeClass,
            modalContainerClass,
          ]"
          ref="modalContentRef"
        >
          <!-- Loading overlay -->
          <div
            v-if="isLoading"
            class="absolute inset-0 bg-[#171717] bg-opacity-90 flex flex-col items-center justify-center z-20 rounded-lg p-6"
          >
            <slot name="loading">
              <svg
                class="animate-spin h-8 w-8 text-blue-500"
                viewBox="0 0 24 24"
                fill="none"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                ></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v8z"
                ></path>
              </svg>
              <p class="mt-3 text-sm text-white">{{ loadingText }}</p>
            </slot>
          </div>

          <!-- Error overlay -->
          <div
            v-else-if="errorMessage && !isLoading"
            class="absolute inset-0 bg-[#171717] bg-opacity-95 flex flex-col items-center justify-center z-20 rounded-lg p-6 text-center"
          >
            <slot name="error">
              <div
                class="bg-red-900 border border-red-700 text-red-100 px-4 py-3 rounded relative max-w-md"
                role="alert"
              >
                <strong class="font-bold">Erro!</strong>
                <p class="block sm:inline">{{ errorMessage }}</p>
              </div>
            </slot>
          </div>

          <!-- Modal content (header, body, footer) -->
          <div
            :class="[
              'flex flex-col flex-1 min-h-0 h-full',
              modalSizeClass,
              contentWrapperClass,
            ]"
            v-if="!isLoading && !errorMessage"
          >
            <!-- Header: slot ou default -->
            <div
              v-if="$slots.header"
              class="base-modal-header flex-shrink-0"
              role="heading"
              aria-level="1"
            >
              <slot name="header"></slot>
            </div>
            <div
              v-else-if="!hideDefaultHeader"
              class="base-modal-header flex items-center justify-between px-6 py-4 border-b border-[#343434] flex-shrink-0"
              role="heading"
              aria-level="1"
            >
              <h2
                :id="title ? 'base-modal-title-slot' : undefined"
                class="text-lg font-semibold text-white truncate"
              >
                {{ title }}
              </h2>
              <button
                @click="closeModal"
                class="text-[#A0A0A0] hover:text-white transition-colors p-1 -mr-1"
                aria-label="Fechar modal"
              >
                <CloseIcon class="h-5 w-5" />
              </button>
            </div>

            <!-- Body (default slot) -->
            <div
              :class="[
                'base-modal-body h-full min-h-0 flex-1 overflow-y-auto',
                bodyClass,
              ]"
            >
              <slot></slot>
            </div>

            <!-- Footer: slot ou default -->
            <div v-if="$slots.footer" class="base-modal-footer flex-shrink-0">
              <slot name="footer"></slot>
            </div>
            <div
              v-else-if="!hideDefaultFooter"
              class="base-modal-footer flex justify-end items-center px-6 py-4 border-t border-[#343434] flex-shrink-0 gap-3 min-h-[68px]"
            ></div>
          </div>
        </div>
      </div>
    </Transition>
  </Teleport>
</template>

<script setup lang="ts">
import CloseIcon from "~/components/icon/CloseIcon.vue";

const props = defineProps({
  isOpen: { type: Boolean, required: true },
  title: { type: String, default: "" },
  size: { type: String, default: "viewport-fill" },
  closeOnBackdropClick: { type: Boolean, default: true },
  closeOnEsc: { type: Boolean, default: true },
  isLoading: { type: Boolean, default: false },
  loadingText: { type: String, default: "Carregando..." },
  errorMessage: { type: String, default: null },
  hideDefaultHeader: { type: Boolean, default: true },
  hideDefaultFooter: { type: Boolean, default: true },
  modalContainerClass: { type: String, default: "" },
  contentWrapperClass: { type: String, default: "" },
  bodyClass: { type: String, default: "" },
});

// Teleport target: use #modal-container if present, otherwise fallback to body
const teleportTarget = computed(() =>
  document.getElementById("modal-container") ? "#modal-container" : "body"
);

// Declare both 'close' and 'save' so Vue won't warn when @save is used upstream
const emit = defineEmits(["close", "save"]);

const modalContentRef = ref<HTMLElement | null>(null);

const modalSizeClass = computed(() => {
  switch (props.size) {
    case "sm":
      return "max-w-lg w-full min-h-[200px] max-h-[80vh]";
    case "md":
      return "max-w-xl w-full min-h-[300px] max-h-[80vh]";
    case "lg":
      return "max-w-3xl w-full min-h-[400px] max-h-[80vh]";
    case "xl":
      return "max-w-5xl w-full min-h-[500px] max-h-[85vh]";
    case "viewport-fill":
      // Preenche totalmente a área do wrapper (que já exclui SideNav/AgentSidebar),
      // sem ultrapassar para fora nem colar nas bordas internas
      return "w-full h-full max-w-full max-h-full min-h-[300px]";
    case "fullscreen":
      return "w-screen h-screen max-w-none max-h-none rounded-none !border-0";
    default:
      return "w-[95vw] h-[95vh] min-h-[300px]";
  }
});

// Modal close handlers
function closeModal() {
  emit("close");
}
function handleBackdropClick() {
  if (props.closeOnBackdropClick) closeModal();
}
function handleEscKey(event: KeyboardEvent) {
  if (props.isOpen && props.closeOnEsc && event.key === "Escape") closeModal();
}

// Use Nuxt's auto-imported lifecycle hooks
onMounted(() => {
  document.addEventListener("keydown", handleEscKey);
});

onUnmounted(() => {
  document.removeEventListener("keydown", handleEscKey);
});

// Focus trap: (simplificado, só volta foco pro modal se perder)
watch(
  () => props.isOpen,
  (open: boolean) => {
    if (open) setTimeout(() => modalContentRef.value?.focus(), 100);
  }
);
</script>

<style scoped>
.base-modal-container {
  max-height: 95vh;
  display: flex;

  flex-direction: column;
  position: relative;
}
.base-modal-body::-webkit-scrollbar {
  width: 6px;
}
.base-modal-body::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 3px;
}
.base-modal-body::-webkit-scrollbar-thumb {
  background-color: #4a5568;
  border-radius: 3px;
}
.base-modal-body::-webkit-scrollbar-thumb:hover {
  background-color: #718096;
}
.base-modal-body {
  scrollbar-width: thin;
  scrollbar-color: #4a5568 rgba(255, 255, 255, 0.05);
}

.modal-fade-enter-active,
.modal-fade-leave-active {
  transition: opacity 0.2s ease-in-out;
}
.modal-fade-enter-from,
.modal-fade-leave-to {
  opacity: 0;
}
.modal-fade-enter-active .base-modal-container,
.modal-fade-leave-active .base-modal-container {
  transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
}
.modal-fade-enter-from .base-modal-container,
.modal-fade-leave-to .base-modal-container {
  transform: scale(0.98) translateY(5px);
  opacity: 0;
}
</style>
</file>

<file path="components/ui/Button.vue">
<template>
  <button
    class="inline-flex items-center justify-center px-3 py-1.5 w-[130px] h-[40px] bg-[#8E6CE4] border-t-2 border-t-[#AB8FF1] rounded-sm text-white font-sans font-semibold text-normal leading-none tracking-[-0.12px] hover:opacity-90 transition-opacity"
    :class="[fullWidth ? 'w-full' : '']"
    :disabled="disabled"
    :type="type"
    @click="$emit('click', $event)"
  >
    <slot>Pesquisar nicho</slot>
  </button>
</template>

<script setup lang="ts">
const {
  type = "button",
  disabled = false,
  fullWidth = false,
} = defineProps<{
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  fullWidth?: boolean;
}>();

defineEmits<{
  (e: "click", event: MouseEvent): void;
}>();
</script>
</file>

<file path="layouts/blank.vue">
<!-- layouts/blank.vue -->
<template>
  <div>
    <!-- O <slot /> é o local onde o conteúdo da sua página (index.vue) será renderizado -->
    <slot />
  </div>
</template>
</file>

<file path="layouts/default.vue">
<!-- layouts/default.vue -->
<template>
  <div class="flex min-h-screen">
    <!-- Futuramente, o <SideNav /> entrará aqui -->
    <main class="flex-1">
      <!-- Mude de <NuxtPage /> para <slot /> -->
      <slot />
    </main>
  </div>
</template>
</file>

<file path="plugins/click-outside.ts">
// @ts-nocheck
import type { NuxtApp } from 'nuxt/app';
import vClickOutside from 'v-click-outside';

export default defineNuxtPlugin((nuxtApp: NuxtApp) => {
  nuxtApp.vueApp.use(vClickOutside);
});
</file>

<file path="plugins/supabase.client.ts">
import { defineNuxtPlugin } from "#imports";

// This plugin is intentionally left empty as we're using @nuxtjs/supabase module
// which provides the Supabase client automatically
// This prevents duplicate Supabase client initialization

export default defineNuxtPlugin(() => {
  // The @nuxtjs/supabase module automatically provides $supabase
  // No need to create another instance here
});
</file>

<file path="public/robots.txt">
User-Agent: *
Disallow:
</file>

<file path="stores/mindMapStore.ts">
import { defineStore } from "pinia";
import type { Node, Edge } from "@vue-flow/core";
import { layoutMindMap } from "~/composables/useMindMapLayout";

type NodeLevel =
  | "CoreMarket"
  | "Category"
  | "Subcategory"
  | "Niche"
  | "SubNiche";

export interface MindMapNode extends Node {
  parentNode?: string;
  data: {
    label: string;
    level: NodeLevel;
    isRoot?: boolean;
    iconName?: string;
    children?: MindMapNode[];
    isExpanded?: boolean;
    edgeLabel?: string;
  };
}

// Start with all nodes collapsed by default
const initialNodes: MindMapNode[] = [
  {
    id: "health",
    type: "custom",
    data: {
      label: "Saúde",
      level: "CoreMarket",
      isRoot: true,
      iconName: "heart",
      isExpanded: false,
      children: [
        {
          id: "nutrition",
          type: "custom",
          data: {
            label: "Nutrição e dieta",
            level: "Category",
            isRoot: false,
            isExpanded: false,
            edgeLabel: "Nutrição e dieta",
            children: [
              {
                id: "diets",
                type: "custom",
                data: {
                  label: "Dietas",
                  level: "Subcategory",
                  isExpanded: false,
                  edgeLabel: "Dietas",
                  children: [
                    {
                      id: "low-carb",
                      type: "custom",
                      data: {
                        label: "Low-carb",
                        level: "Niche",
                        isExpanded: false,
                        edgeLabel: "Low-carb",
                        children: [
                          {
                            id: "low-carb-diabeticos",
                            type: "custom",
                            data: {
                              label: "Receitas low-carb para diabéticos",
                              level: "SubNiche",
                              isExpanded: false,
                              edgeLabel: "Receitas low-carb p/ diabéticos",
                              children: [],
                            },
                            position: { x: 0, y: 0 },
                          },
                        ],
                      },
                      position: { x: 0, y: 0 },
                    },
                    {
                      id: "plant-based",
                      type: "custom",
                      data: {
                        label: "Plant-based",
                        level: "Niche",
                        isExpanded: false,
                        edgeLabel: "Plant-based",
                        children: [
                          {
                            id: "cardapios-economicos",
                            type: "custom",
                            data: {
                              label: "Cardápios semanais econômicos",
                              level: "SubNiche",
                              isExpanded: false,
                              edgeLabel: "Cardápios econômicos",
                              children: [],
                            },
                            position: { x: 0, y: 0 },
                          },
                        ],
                      },
                      position: { x: 0, y: 0 },
                    },
                  ],
                },
                position: { x: 0, y: 0 },
              },
              {
                id: "supplementation",
                type: "custom",
                data: {
                  label: "Suplementação",
                  level: "Subcategory",
                  isExpanded: false,
                  edgeLabel: "Suplementação",
                  children: [
                    {
                      id: "performance",
                      type: "custom",
                      data: {
                        label: "Performance esportiva",
                        level: "Niche",
                        isExpanded: false,
                        edgeLabel: "Performance esportiva",
                        children: [
                          {
                            id: "creatina-iniciantes",
                            type: "custom",
                            data: {
                              label: "Creatina para iniciantes",
                              level: "SubNiche",
                              isExpanded: false,
                              edgeLabel: "Creatina p/ iniciantes",
                              children: [],
                            },
                            position: { x: 0, y: 0 },
                          },
                        ],
                      },
                      position: { x: 0, y: 0 },
                    },
                  ],
                },
                position: { x: 0, y: 0 },
              },
            ],
          },
          position: { x: 0, y: 0 },
        },
        {
          id: "mental-wellness",
          type: "custom",
          data: {
            label: "Bem estar mental",
            level: "Category",
            isRoot: false,
            isExpanded: false,
            edgeLabel: "Bem estar mental",
            children: [],
          },
          position: { x: 0, y: 0 },
        },
        {
          id: "fitness",
          type: "custom",
          data: {
            label: "Fitness e atividade física",
            level: "Category",
            isRoot: false,
            isExpanded: false,
            edgeLabel: "Fitness e atividade física",
            children: [],
          },
          position: { x: 0, y: 0 },
        },
      ],
    },
    position: { x: 0, y: 0 },
  },
  {
    id: "wealth",
    type: "custom",
    data: {
      label: "Prosperidade",
      level: "CoreMarket",
      isRoot: true,
      isExpanded: false,
      children: [],
    },
    position: { x: 0, y: 0 },
  },
  {
    id: "relationships",
    type: "custom",
    data: {
      label: "Relacionamentos",
      level: "CoreMarket",
      isRoot: true,
      isExpanded: false,
      children: [],
    },
    position: { x: 0, y: 0 },
  },
];

export const useMindMapStore = defineStore("mindMap", {
  state: () => ({
    nodes: initialNodes,
  }),

  getters: {
    // Single source of truth for all elements (nodes + edges)
    elements(state): (MindMapNode | Edge)[] {
      const elements: (MindMapNode | Edge)[] = [];

      // Helper to flatten a tree respecting `isExpanded`
      const flattenVisible = (root: MindMapNode) => {
        const outNodes: MindMapNode[] = [];
        const outEdges: Edge[] = [];

        const walk = (node: MindMapNode) => {
          outNodes.push({ ...node });
          if (node.data.isExpanded && node.data.children?.length) {
            for (const child of node.data.children) {
              // ensure parent link for edge id/source
              child.parentNode = node.id;
              outEdges.push({
                id: `edge-${node.id}-${child.id}`,
                source: node.id,
                target: child.id,
                type: "smoothstep",
                style: { stroke: "#6b7280", strokeWidth: 1.5 },
                animated: false,
                data: { label: child.data?.edgeLabel },
              } as Edge);
              walk(child);
            }
          }
        };

        walk(root);
        return { nodes: outNodes, edges: outEdges };
      };

      // Layout options
      const levelGap = 320;
      const rowGap = 120;

      // For each root, flatten, layout, and merge
      state.nodes.forEach((root: MindMapNode, idx: number) => {
        const { nodes, edges } = flattenVisible(root);

        if (!nodes.length) return;

        const positioned = layoutMindMap(nodes, edges, {
          rootId: root.id,
          levelGap,
          rowGap,
          center: { x: 120, y: 180 + idx * 220 },
        }) as MindMapNode[];

        // Merge nodes and edges for this root
        for (const n of positioned) elements.push(n);
        for (const e of edges) elements.push(e);
      });

      return elements;
    },
  },

  actions: {
    toggleNode(nodeId: string) {
      const findAndToggle = (nodes: MindMapNode[]): boolean => {
        for (const node of nodes) {
          if (node.id === nodeId) {
            node.data.isExpanded = !node.data.isExpanded;
            return true;
          }
          if (node.data.children && findAndToggle(node.data.children)) {
            return true;
          }
        }
        return false;
      };
      findAndToggle(this.nodes);
    },
  },
});
</file>

<file path="types/components.d.ts">
// Type definitions for components
declare module '#components' {
  const LandingHeader: typeof import('../components/landing/LandingHeader.vue')['default']
  const HeroSection: typeof import('../components/landing/HeroSection.vue')['default']
  const FeaturesSection: typeof import('../components/landing/FeaturesSection.vue')['default']
  
  export {
    LandingHeader,
    HeroSection,
    FeaturesSection
  }
}

// Global component types
declare module 'vue' {
  interface GlobalComponents {
    LandingHeader: typeof import('../components/landing/LandingHeader.vue')['default']
    HeroSection: typeof import('../components/landing/HeroSection.vue')['default']
    FeaturesSection: typeof import('../components/landing/FeaturesSection.vue')['default']
  }
}

export {}
</file>

<file path="types/global.d.ts">
// Global type definitions for your project

// Type for the user from Supabase Auth
type User = {
  id: string;
  email?: string;
  // Add other user properties as needed
};

declare module '#app' {
  interface NuxtApp {
    $supabase: any; // You can replace 'any' with your Supabase client type
  }
}

declare module '@vue/runtime-core' {
  interface ComponentCustomProperties {
    $supabase: any; // You can replace 'any' with your Supabase client type
  }
}

// This tells TypeScript about the auto-imported functions
declare global {
  const defineNuxtRouteMiddleware: typeof import('nuxt/app')['defineNuxtRouteMiddleware'];
  const navigateTo: typeof import('nuxt/app')['navigateTo'];
  const useSupabaseClient: () => any; // Replace 'any' with your Supabase client type
  const useSupabaseUser: () => Ref<User | null>;
}
</file>

<file path="types/imports.d.ts">
// Type definitions for Nuxt auto-imports
declare module '#imports' {
  export * from '@nuxt/schema';
  export * from 'nuxt/app';
  export * from 'vue';
  export * from 'vue-router';
  export * from '#app';
  
  // Add Supabase client type
  export function useSupabaseClient(): any;
}

declare module '#app' {
  // Add navigateTo type
  export function navigateTo(route: string): Promise<void>;
  
  // Add defineNuxtRouteMiddleware type
  export function defineNuxtRouteMiddleware(middleware: (to: any, from: any) => any): any;
  interface NuxtApp {
    $supabase: any;
  }
}
</file>

<file path="types/nuxt-app.d.ts">
// Type definitions for Nuxt 3 app
declare module '#app' {
  interface NuxtApp {
    $supabase: any;
  }

  // Global middleware type
  function defineNuxtRouteMiddleware(
    middleware: (to: any, from: any) => Promise<void> | void
  );

  // Navigation helper
  function navigateTo(route: string, options?: { replace?: boolean }): Promise<void>;
}

declare module '@vue/runtime-core' {
  interface ComponentCustomProperties {
    $supabase: any;
  }
}

// Type definitions for auto-imports
declare module '#imports' {
  export * from 'vue';
  export * from 'vue-router';
  export * from '@nuxt/kit';
  export * from '@nuxt/schema';
  
  // Supabase
  export function useSupabaseClient(): any;
  export function useSupabaseUser(): any;
  
  // Nuxt composables
  export function useNuxtApp(): any;
  export function useRuntimeConfig(): any;
  export function useRoute(): any;
  export function useRouter(): any;
  export function useHead(meta: any): void;
  export function useSeoMeta(meta: any): void;
  
  // Other common composables
  export function ref<T>(value: T): { value: T };
  export function reactive<T extends object>(target: T): T;
  export function computed<T>(getter: () => T): { readonly value: T };
  export function watch<T>(source: () => T, callback: (newValue: T, oldValue: T) => void): () => void;
}
</file>

<file path="types/nuxt-config.d.ts">
// Type definitions for Nuxt config
declare module '@nuxt/schema' {
  interface NuxtConfig {
    // Nuxt Supabase module configuration
    supabase?: {
      url?: string
      key?: string
      serviceKey?: string
      redirect?: boolean
      redirectOptions?: {
        login: string
        callback: string
        exclude?: string[]
        cookieRedirect?: boolean
      }
      cookieOptions?: {
        name?: string
        lifetime?: number
        domain?: string
        path?: string
        sameSite?: 'lax' | 'strict' | 'none'
      }
      clientOptions?: {
        auth?: {
          flowType?: 'implicit' | 'pkce'
          detectSessionInUrl?: boolean
          persistSession?: boolean
          autoRefreshToken?: boolean
        }
      }
    }
  }
}

export {}
</file>

<file path="types/supabase.d.ts">
import type { SupabaseClient } from '@supabase/supabase-js'

type Tables = {
  // Define your database tables here
  // Example:
  // todos: {
  //   Row: { id: string; created_at: string; title: string; completed: boolean }
  //   Insert: { id?: string; created_at?: string; title: string; completed?: boolean }
  //   Update: { id?: string; created_at?: string; title?: string; completed?: boolean }
  // }
}

type Database = Tables

declare module '#app' {
  interface NuxtApp {
    $supabase: SupabaseClient<Database>
  }
}

declare module '@vue/runtime-core' {
  interface ComponentCustomProperties {
    $supabase: SupabaseClient<Database>
  }
}

export {}
</file>

<file path="types/supabase.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface Database {
  public: {
    Tables: {
      // Vamos adicionar as tabelas aqui no futuro
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}
</file>

<file path="types/tailwind.d.ts">
// This file provides TypeScript support for Tailwind CSS
declare module 'tailwindcss' {
  // Add type definitions here if needed
}

declare module '@nuxtjs/tailwindcss' {
  // Add type definitions here if needed
}
</file>

<file path="types/v-click-outside.d.ts">
declare module 'v-click-outside' {
  import { DirectiveFunction } from 'vue';
  
  const vClickOutside: {
    install: (app: any) => void;
  };
  
  export default vClickOutside;
}
</file>

<file path="types/vue-flow-controls.d.ts">
// Type definitions for @vue-flow/controls

declare module '@vue-flow/controls' {
  import { DefineComponent } from 'vue';
  
  export const Controls: DefineComponent<{
    showZoom?: boolean;
    showFitView?: boolean;
    showInteractive?: boolean;
    position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
  }>;
  
  export const ControlButton: DefineComponent<{
    class?: string;
    style?: string | Record<string, any>;
    title?: string;
    disabled?: boolean;
  }>;
}
</file>

<file path=".env.example">
# Supabase Configuration
SUPABASE_URL=your-supabase-url
SUPABASE_ANON_KEY=your-supabase-anon-key

# Other environment variables
NODE_ENV=development

# Optional: Service role key (only for server-side operations)
# SUPABASE_SERVICE_KEY=your-supabase-service-key
</file>

<file path=".gitignore">
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example
</file>

<file path="components.d.ts">
// Type definitions for Vue components
declare module '*.vue' {
  import type { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
}

// Component type declarations
declare module '#app' {
  interface NuxtApp {
    // App-level types
  }
  
  interface PageMeta {
    layout?: string
  }
}

// Global component types
declare module 'vue' {
  interface GlobalComponents {
    LandingHeader: typeof import('./components/landing/LandingHeader.vue')['default']
    HeroSection: typeof import('./components/landing/HeroSection.vue')['default']
    FeaturesSection: typeof import('./components/landing/FeaturesSection.vue')['default']
  }
}

// Type declarations for Nuxt auto-imports
declare module '#imports' {
  export const useSeoMeta: typeof import('@unhead/vue')['useSeoMeta']
  export const ref: typeof import('vue')['ref']
}

declare module '#app' {
  interface PageMeta {
    layout?: string
  }
  
  function definePageMeta(meta: PageMeta): void
}

export {}
</file>

<file path="nuxt.tsconfig.json">
{
  "extends": "./.nuxt/tsconfig.json"
}
</file>

<file path="README.md">
# Nuxt Minimal Starter

Look at the [Nuxt documentation](https://nuxt.com/docs/getting-started/introduction) to learn more.

## Setup

Make sure to install dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app.vue",
    "./app/**/*.vue",
    "./components/**/*.{js,vue,ts}",
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./error.vue"
  ],
  theme: {
    extend: {
      colors: {
        dark: '#171717',
      }
    },
  },
  plugins: [],
  darkMode: 'class',
  corePlugins: {
    preflight: true,
  },
  future: {
    hoverOnlyWhenSupported: true,
  },
  important: true
}
</file>

<file path="components/landing/HeroSection.vue">
<template>
  <section class="bg-[#17171C] w-full py-16 md:py-24">
    <div
      class="max-w-5xl font-light mx-auto flex flex-col md:flex-row items-center justify-between px-4 gap-10"
    >
      <!-- Left: Headline, Subheadline, CTA -->
      <div class="flex-1 flex flex-col md:items-start text-center md:text-left">
        <h1 class="text-3xl md:text-5xl font-bold text-white mb-4">
          {{ headline }}
        </h1>
        <p class="text-lg md:text-2xl text-white mb-8 font-medium">
          {{ subheadline }}
        </p>
        <NuxtLink
          to="/register"
          class="w-full md:w-auto inline-block px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg shadow transition text-center"
        >
          {{ ctaText || "Comece a usar de graça" }}
        </NuxtLink>
      </div>
      <!-- Right: Slot for image/visual -->

      <div
        class="flex-1 flex justify-center md:justify-end w-full mt-10 md:mt-0"
      >
        <img src="~/assets/images/hero-img.png" alt="Hero Image" />
      </div>
    </div>
  </section>
</template>

<script setup lang="ts">
defineProps<{
  headline: string;
  subheadline: string;
  ctaText?: string;
}>();
</script>
</file>

<file path="components/landing/LandingHeader.vue">
<template>
  <header
    class="w-full bg-[#17171C] px-6 py-4 flex items-center justify-between shadow-sm border-b border-[#232323]"
  >
    <NuxtLink to="/" class="flex items-center gap-2">
      <!-- Substitua pelo componente/logo real caso exista -->
      <Logo class="w-8 h-8" />
      <span class="text-xl font-light text-white">Gold Miner</span>
    </NuxtLink>
    <NuxtLink
      to="/register"
      class="btn btn-primary bg-blue-600 text-white rounded-lg px-5 py-2 font-semibold hover:bg-blue-700 transition"
    >
      Comece a usar de graça
    </NuxtLink>
  </header>
</template>

<script setup>
import Logo from "~/components/icon/Logo.vue";
// Nenhuma lógica específica necessária para este header simples
</script>
</file>

<file path="components/SearchCard.vue">
<template>
  <div class="flex flex-col items-start p-3 gap-2.5 w-full bg-[#17171C] shadow-md rounded-lg">
    <!-- Header -->
    <div class="w-full flex flex-row items-center">
      <h3 class="text-[#DAD7DE] text-sm font-semibold leading-5">
        Busque por um mercado ou nicho
      </h3>
    </div>
    
    <!-- Search Input -->
    <div class="w-full">
      <div class="relative flex items-center w-full">
        <input
          type="text"
          :placeholder="placeholder"
          :value="modelValue"
          @input="handleInput"
          @keyup.enter="$emit('search', searchQuery)"
          class="w-full h-9 px-2.5 py-1.5 bg-[#292932] rounded text-[#DAD7DE] text-sm placeholder:text-[rgba(218,215,222,0.3)] focus:outline-none focus:ring-1 focus:ring-[#8E6CE4]"
        />
        <button
          v-if="modelValue"
          @click="clearSearch"
          class="absolute right-2 text-[#DAD7DE] hover:text-white"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Results Slot -->
    <div v-if="$slots.results" class="w-full">
      <slot name="results"></slot>
    </div>
  </div>
</template>

<script setup lang="ts">
const props = defineProps({
  placeholder: {
    type: String,
    default: "ex: 'saúde para idosos', 'produtividade'"
  },
  modelValue: {
    type: String,
    default: ''
  }
})

const emit = defineEmits(['update:modelValue', 'search'])

const searchQuery = ref(props.modelValue)

const handleInput = (event: Event) => {
  const value = (event.target as HTMLInputElement).value
  searchQuery.value = value
  emit('update:modelValue', value)
  emit('search', value)
}

const clearSearch = () => {
  searchQuery.value = ''
  emit('update:modelValue', '')
  emit('search', '')
}

// Watch for external modelValue changes
watch(() => props.modelValue, (newValue: string) => {
  if (newValue !== searchQuery.value) {
    searchQuery.value = newValue
  }
})
</script>
</file>

<file path="middleware/auth.global.ts">
// Import directly from Nuxt 3 packages
import { navigateTo, defineNuxtRouteMiddleware } from '#app';
import { useSupabaseClient } from '#imports';

export default defineNuxtRouteMiddleware(async (to, _from) => {

  // Páginas que não exigem login
  const publicPages = ["/", "/login", "/register"];

  if (publicPages.includes(to.path)) {
    return; // Permite o acesso a páginas públicas
  }

  const supabase = useSupabaseClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user && !publicPages.includes(to.path)) {
    // Se não há usuário e a página é privada, redireciona para o login
    return navigateTo("/login");
  } else if (
    user &&
    (to.path === "/login" || to.path === "/register" || to.path === "/")
  ) {
    // Se há usuário e ele tenta acessar o login/cadastro/landing, redireciona para o app
    return navigateTo("/app");
  }
});
</file>

<file path="pages/index.vue">
<template>
  <div class="min-h-screen bg-[#17171C] text-white">
    <LandingHeader />
    <main class="w-full mx-auto px-4 py-10">
      <HeroSection
        headline="Pare de procurar por ideias. Comece a minerar ouro."
        subheadline="O Gold Miner é um framework visual que usa IA para descobrir nichos de mercado promissores, validar a demanda e gerar sua primeira landing page. Tudo em menos de uma hora."
        ctaText="Encontre sua ideia de ouro de graça"
      />
      <FeaturesSection :features="productFeatures" />
    </main>
  </div>
</template>

<script setup lang="ts">
// Define features data with TypeScript type
interface Feature {
  title: string;
  description: string;
  icon?: string;
}

const productFeatures: Feature[] = [
  {
    title: "Análise de Mercado",
    description:
      "Identifique oportunidades de mercado com base em dados reais de busca e concorrência.",
    icon: "📊",
  },
  {
    title: "Validação de Ideias",
    description:
      "Teste a viabilidade do seu negócio antes de investir tempo e dinheiro.",
    icon: "✅",
  },
  {
    title: "Geração de Conteúdo",
    description:
      "Crie conteúdo otimizado para seu público-alvo com a ajuda de IA.",
    icon: "✍️",
  },
];

// Page metadata
definePageMeta({
  layout: "default",
});
</script>
</file>

<file path="types/nuxt.d.ts">
import type { SupabaseClient, User } from '@supabase/supabase-js';
import type { Config } from 'tailwindcss';
import type { H3Event } from 'h3';
import type { RouteLocationNormalized } from 'vue-router';

type Tables = {
  // Define your database tables here
  // Example:
  // todos: {
  //   Row: { id: string; created_at: string; title: string; completed: boolean }
  //   Insert: { id?: string; created_at?: string; title: string; completed?: boolean }
  //   Update: { id?: string; created_at?: string; title?: string; completed?: boolean }
  // }
}

type Database = Tables

declare module '#app' {
  interface NuxtApp {
    $supabase: SupabaseClient<Database>
  }
  
  // Add global middleware types
  function defineNuxtRouteMiddleware(
    middleware: (to: RouteLocationNormalized, from: RouteLocationNormalized) => Promise<void> | void
  ): void
  
  function navigateTo(
    to: string,
    options?: { replace?: boolean; redirectCode?: number }
  ): Promise<void> | void
  
  function useSupabaseClient(): SupabaseClient<Database>
  function useSupabaseUser(): any // Adjust the type according to your user type
}

declare module '@vue/runtime-core' {
  interface ComponentCustomProperties {
    $supabase: SupabaseClient<Database>
  }
}

// Extend Nuxt configuration with Tailwind CSS module
declare module 'nuxt/schema' {
  interface NuxtConfig {
    tailwindcss?: {
      config?: Partial<Config>
      cssPath?: string
      configPath?: string
      exposeConfig?: boolean
      injectPosition?: number
      viewer?: boolean
    }
  }
}

// This is needed for the $tailwind property
declare module '@nuxt/schema' {
  interface NuxtConfig {
    tailwindcss?: {
      config?: Partial<Config>
      cssPath?: string
      configPath?: string
      exposeConfig?: boolean
      injectPosition?: number
      viewer?: boolean
    }
  }
}

// Type definitions for Nuxt auto-imports
declare global {
  // Nuxt auto-imports
  const definePageMeta: typeof import('nuxt/app')['definePageMeta']
  const useHead: typeof import('@unhead/vue')['useHead']
  const useSeoMeta: typeof import('@unhead/vue')['useSeoMeta']
  const useNuxtApp: typeof import('nuxt/app')['useNuxtApp']
  const ref: typeof import('vue')['ref']
  const computed: typeof import('vue')['computed']
  const onMounted: typeof import('vue')['onMounted']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const watch: typeof import('vue')['watch']
  const useRouter: typeof import('vue-router')['useRouter']
  const useRoute: typeof import('vue-router')['useRoute']
  
  // Supabase
  const useSupabaseClient: () => SupabaseClient<Database>
  const useSupabaseUser: () => any // You can type this more specifically if needed
}

export {}
</file>

<file path="tsconfig.json">
// Base TypeScript configuration for Nuxt 3
{
  // Extend from the Nuxt recommended tsconfig
  "extends": "./.nuxt/tsconfig.json",
  
  // Compiler options
  "compilerOptions": {
    // Type checking
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "allowJs": true,
    "noEmit": true,
    
    // Module resolution
    "baseUrl": ".",
    "moduleResolution": "bundler",
    "module": "esnext",
    "target": "ESNext",
    "jsx": "preserve",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    
    // Path aliases
    "paths": {
      "~/*": ["./*"],
      "@/*": ["./*"],
      "#imports": ["./.nuxt/imports.d.ts"],
      "#components": ["./components"]
    }
  },
  
  // Include these files for type checking
  "include": [
    ".nuxt/nuxt.d.ts",
    "components/**/*",
    "composables/**/*",
    "layouts/**/*",
    "middleware/**/*",
    "pages/**/*",
    "plugins/**/*",
    "app.vue",
    "error.vue",
    "types/**/*.d.ts",
    "types/**/*.ts"
  ],
  
  // Exclude these files from type checking
  "exclude": [
    "node_modules",
    ".nuxt",
    ".output",
    "dist"
  ]
}
</file>

<file path="pages/login.vue">
<template>
  <div
    class="flex flex-col items-center justify-center min-h-screen bg-[#17171C]"
  >
    <div
      class="bg-[#17171C] border border-[#47464B] p-8 rounded-lg shadow-md w-full max-w-sm"
    >
      <div class="flex items-center justify-center mb-6">
        <Logo class="w-8 h-8" />
        <h2 class="text-xl ml-1 font-light text-white">Gold Miner</h2>
      </div>

      <form @submit.prevent="handleLogin">
        <div class="mb-4">
          <label class="block text-white mb-2 font-light" for="email"
            >E-mail</label
          >
          <input
            v-model="email"
            id="email"
            type="email"
            autocomplete="email"
            required
            class="w-full px-3 py-2 border border-[#47464B] rounded text-white bg-[#2C2B30] autofill-bg"
          />
        </div>
        <div class="mb-6">
          <label class="block text-white mb-2 font-light" for="password"
            >Senha</label
          >
          <input
            v-model="password"
            id="password"
            type="password"
            autocomplete="current-password"
            required
            class="w-full px-3 py-2 border border-[#47464B] rounded text-white bg-[#2C2B30] autofill-bg"
          />
        </div>
        <div class="mt-4">
          <Button type="submit" :disabled="isLoading" class="w-full">
            <template v-if="!isLoading">Entrar</template>
            <template v-else>
              <svg
                class="animate-spin h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M12 2a10 10 0 100 20 10 10 0 000-20zm1 18V4a8 8 0 010 16z"
                />
              </svg>
              <span class="ml-2">Entrando...</span>
            </template>
          </Button>
        </div>
        <p v-if="error" class="mt-4 text-red-600 text-center">{{ error }}</p>
      </form>
      <p class="block mt-6 text-sm text-center text-white">
        Não tem uma conta?
        <NuxtLink
          to="/register"
          class="mt-6 text-sm text-blue-600 hover:underline text-center"
        >
          Cadastre-se
        </NuxtLink>
      </p>
    </div>
  </div>
</template>

<script setup lang="ts">
// Components
import Button from "~/components/ui/Button.vue";
import Logo from "~/components/icon/Logo.vue";

// State
const email = ref("");
const password = ref("");
const error = ref("");
const isLoading = ref(false);

// Composable
const router = useRouter();
const supabase = useSupabaseClient();

// Nuxt 3 auto-imports these:
// - ref, useRouter, useSupabaseClient, NuxtLink

async function handleLogin() {
  isLoading.value = true;
  error.value = "";
  const { error: loginError } = await supabase.auth.signInWithPassword({
    email: email.value,
    password: password.value,
  });

  if (loginError) {
    error.value = "E-mail ou senha inválidos.";
    isLoading.value = false;
    return;
  } else {
    // Aguarda tarefas carregarem, passando o client
    await router.replace("/app");

    isLoading.value = false;
  }
}
</script>

<style scoped>
/* Autofill styles */
:deep(input.autofill-bg:-webkit-autofill),
:deep(input.autofill-bg:-webkit-autofill:hover),
:deep(input.autofill-bg:-webkit-autofill:focus),
:deep(input.autofill-bg:-webkit-autofill:active) {
  -webkit-box-shadow: 0 0 0 30px #2c2b30 inset !important;
  -webkit-text-fill-color: white !important;
  transition: background-color 5000s ease-in-out 0s;
}

body {
  background: #f9fafb;
}
</style>
</file>

<file path="pages/register.vue">
<script setup>
definePageMeta({ layout: "blank" });
import { ref } from "vue";
import { useRouter } from "vue-router";
import Logo from "~/components/icon/Logo.vue";
import Button from '~/components/ui/Button.vue';

const supabase = useSupabaseClient();
const router = useRouter();

const email = ref("");
const password = ref("");
const confirmPassword = ref("");
const errorMessage = ref("");
const successMessage = ref("");
const loading = ref(false);

const handleRegister = async () => {
  errorMessage.value = "";
  successMessage.value = "";
  if (password.value !== confirmPassword.value) {
    errorMessage.value = "As senhas não coincidem.";
    return;
  }
  loading.value = true;
  const { error } = await supabase.auth.signUp({
    email: email.value,
    password: password.value,
  });
  loading.value = false;
  if (error) {
    errorMessage.value = error.message;
  } else {
    successMessage.value =
      "Cadastro realizado com sucesso! Verifique seu email.";
    setTimeout(() => {
      router.push("/login");
    }, 2000);
  }
};
</script>

<style scoped>
/* Autofill styles */
:deep(input.autofill-bg:-webkit-autofill),
:deep(input.autofill-bg:-webkit-autofill:hover),
:deep(input.autofill-bg:-webkit-autofill:focus),
:deep(input.autofill-bg:-webkit-autofill:active) {
  -webkit-box-shadow: 0 0 0 30px #2c2b30 inset !important;
  -webkit-text-fill-color: white !important;
  transition: background-color 5000s ease-in-out 0s;
}
</style>

<template>
  <div
    class="flex flex-col items-center justify-center min-h-screen bg-[#17171C]"
  >
    <div
      class="bg-[#17171C] border border-[#47464B] p-8 rounded-lg shadow-md w-full max-w-sm"
    >
      <div class="flex items-center justify-center mb-6">
        <Logo class="w-8 h-8" />
        <h2 class="text-xl ml-1 font-light text-white">Gold Miner</h2>
      </div>
      <form @submit.prevent="handleRegister" class="space-y-4">
        <div>
          <label class="block text-white mb-2 font-light" for="email"
            >Email</label
          >
          <input
            id="email"
            v-model="email"
            type="email"
            autocomplete="email"
            class="w-full px-3 py-2 border border-[#47464B] rounded text-white bg-[#2C2B30] focus:bg-[#2C2B30] autofill-bg"
            required
          />
        </div>
        <div>
          <label class="block text-white mb-2 font-light" for="password"
            >Senha</label
          >
          <input
            id="password"
            v-model="password"
            type="password"
            autocomplete="new-password"
            class="w-full px-3 py-2 border border-[#47464B] rounded text-white bg-[#2C2B30] autofill-bg"
            required
          />
        </div>
        <div>
          <label class="block text-white mb-2 font-light" for="confirmPassword"
            >Confirmar senha</label
          >
          <input
            id="confirmPassword"
            v-model="confirmPassword"
            type="password"
            autocomplete="new-password"
            class="w-full px-3 py-2 border border-[#47464B] rounded text-white bg-[#2C2B30] autofill-bg"
            required
          />
        </div>
        <div v-if="errorMessage" class="mt-4 text-red-600 text-center">
          {{ errorMessage }}
        </div>
        <div v-if="successMessage" class="mt-4 text-green-500 text-center">
          {{ successMessage }}
        </div>
        <Button
          type="submit"
          :disabled="loading"
          class="w-full"
        >
          {{ loading ? 'Cadastrando...' : 'Cadastrar' }}
        </Button>
      </form>
      <p class="block mt-6 text-sm text-center text-white">
        Já tem uma conta?
        <NuxtLink to="/login" class="text-blue-600 hover:underline"
          >Entrar</NuxtLink
        >
      </p>
    </div>
  </div>
</template>
</file>

<file path="nuxt.config.ts">
// https://nuxt.com/docs/api/configuration/nuxt-config
import { defineNuxtConfig } from 'nuxt/config';

export default defineNuxtConfig({
  // TypeScript configuration
  typescript: {
    strict: true,
    typeCheck: true,
    tsConfig: {
      compilerOptions: {
        // Enable Vue 3 composition API reactivity transform
        jsx: 'preserve',
        // Improve type checking for Vue components
        jsxImportSource: 'vue',
        // Enable strictest type checking
        strict: true,
        // Better support for Vue's reactivity system
        skipLibCheck: true,
        // Support for modern JavaScript features
        target: 'ESNext',
        module: 'ESNext',
        moduleResolution: 'node',
        // Support for path aliases
        baseUrl: '.',
        paths: {
          '~/*': ['./*']
        },
        // Type checking for Vue files
        types: [
          '@nuxt/types',
          '@pinia/nuxt',
          '@vue/runtime-dom',
          '@vue/compiler-sfc',
          'vite/client'
        ]
      },
      include: [
        '**/*.ts',
        '**/*.d.ts',
        '**/*.tsx',
        '**/*.vue'
      ]
    }
  },
  
  // Core configuration
  compatibilityDate: "2025-07-15",
  devtools: { enabled: true },
  srcDir: ".",
  
  // Build configuration
  build: {
    transpile: ["@vue-flow/core"],
  },
  
  // Global CSS
  css: [
    '~/assets/css/tailwind.css'
  ],

  // Modules
  modules: [
    "@nuxtjs/supabase", 
    "@vueuse/nuxt", 
    "@pinia/nuxt",
    "@nuxtjs/tailwindcss"
  ],
  
  // Tailwind CSS configuration
  // @ts-ignore - Tailwind types will be available after module is loaded
  tailwindcss: {
    cssPath: '~/assets/css/tailwind.css',
    configPath: 'tailwind.config',
    exposeConfig: false,
    injectPosition: 0,
    viewer: true,
  } as any,


  // Supabase module configuration
  // @ts-ignore - Supabase types are not properly recognized
  supabase: {
    // Use environment variables directly
    url: process.env.SUPABASE_URL,
    key: process.env.SUPABASE_ANON_KEY,
    
    // Disable built-in redirects
    redirect: false,
    
    // Client options
    clientOptions: {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true
      }
    }
  },

  // TypeScript configuration is now at the top of the file

  // Components configuration
  components: ["~/components", "~/components/landing"],

  // Auto-imports
  imports: {
    autoImport: true,
  },

  // Vite configuration
  vite: {
    vue: {
      script: {
        defineModel: true,
        propsDestructure: true,
      },
    },
    plugins: [
      {
        name: "disable-vue-tsc",
        config: () => ({
          build: {
            rollupOptions: {
              external: ["vite-plugin-checker"],
            },
          },
        }),
      },
    ],
  },

  // Runtime config
  runtimeConfig: {
    public: {
      // Will be available on both server and client
      siteUrl: process.env.NUXT_PUBLIC_SITE_URL || 'http://localhost:3000',
      supabaseUrl: process.env.SUPABASE_URL || '',
      supabaseAnonKey: process.env.SUPABASE_ANON_KEY || ''
    }
  },
});
</file>

<file path="package.json">
{
  "$schema": "https://json.schemastore.org/package.json",
  "name": "nuxt-app",
  "type": "module",
  "private": true,
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "@heroicons/vue": "^2.2.0",
    "@nuxtjs/supabase": "^1.6.0",
    "@vue-flow/background": "^1.3.2",
    "@vue-flow/controls": "^1.1.3",
    "@vue-flow/core": "^1.46.0",
    "@vueuse/core": "^13.6.0",
    "nuxt": "^3.0.0",
    "repomix": "^1.3.0",
    "v-click-outside": "^3.2.0",
    "vue": "^3.5.18",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@nuxt/kit": "^4.0.3",
    "@nuxt/schema": "^4.0.3",
    "@nuxt/types": "^2.18.1",
    "@nuxtjs/i18n": "^10.0.5",
    "@nuxtjs/tailwindcss": "^6.8.0",
    "@pinia/nuxt": "^0.11.2",
    "@types/node": "^24.3.0",
    "@vue/compiler-sfc": "^3.5.18",
    "@vue/runtime-dom": "^3.5.18",
    "@vueuse/nuxt": "^13.6.0",
    "vue-tsc": "^3.0.5"
  }
}
</file>

<file path="tsconfig.app.json">
{
  "extends": "./nuxt.tsconfig.json",
  "compilerOptions": {
    "composite": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["./*"]
    },
    "types": [
      "node",
      "@nuxt/types",
      "@pinia/nuxt",
      "@nuxtjs/i18n",
      "@vue/runtime-dom",
      "@vue/compiler-sfc",
      "./types/vue-flow-controls",
      "vite/client"
    ]
  },
  "include": [
    "components/**/*",
    "layouts/**/*",
    "middleware/**/*",
    "pages/**/*",
    "plugins/**/*",
    "types/**/*.d.ts",
    "app.vue"
  ]
}
</file>

<file path="components/Header.vue">
<!-- components/Header.vue -->
<template>
  <header
    class="text-white py-4 px-6 flex items-center justify-between w-full z-[100] h-[72px] relative"
  >
    <!-- Menu Hamburger -->
    <div class="relative" ref="dropdownRef">
      <button
        @click.stop="isOpen = !isOpen"
        class="p-2 rounded-md bg-[#2d2d2f] hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
      >
        <Bars3Icon class="h-6 w-6 text-white" />
      </button>

      <!-- Dropdown Menu -->
      <div
        v-if="isOpen"
        class="origin-top-right absolute left-0 mt-2 w-auto rounded-md shadow-lg bg-[#0D0D12] ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
        role="menu"
        aria-orientation="vertical"
        tabindex="-1"
        style="z-index: 1000"
      >
        <div class="py-1" role="none">
          <button
            @click="handleLogout"
            class="text-gray-200 hover:bg-[#2d2d2f] block w-full text-left px-4 py-2 text-sm"
            role="menuitem"
          >
            Sair
          </button>
        </div>
      </div>
    </div>
  </header>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from "vue";
import { useRouter } from "vue-router";
import { Bars3Icon } from "@heroicons/vue/24/outline";

const isOpen = ref(false);
const dropdownRef = ref(null);
const router = useRouter();

const closeMenu = () => {
  isOpen.value = false;
};

const handleClickOutside = (event) => {
  if (dropdownRef.value && !dropdownRef.value.contains(event.target)) {
    closeMenu();
  }
};

const handleLogout = async () => {
  try {
    // Aqui você pode adicionar a lógica de logout se estiver usando autenticação
    // Por exemplo: await supabase.auth.signOut();

    // Redireciona para a página inicial
    await router.push("/");
  } catch (error) {
    console.error("Erro ao fazer logout:", error);
  } finally {
    closeMenu();
  }
};

// Configura o event listener para clique fora após a montagem do componente
onMounted(() => {
  // Usamos setTimeout para garantir que o event listener só seja adicionado
  // após o clique que abriu o menu ser processado
  setTimeout(() => {
    document.addEventListener("click", handleClickOutside);
  }, 0);
});

// Remove o event listener quando o componente é desmontado
onUnmounted(() => {
  document.removeEventListener("click", handleClickOutside);
});
</script>
</file>

<file path="pages/app.vue">
<template>
  <div class="vue-flow-wrapper h-full w-full relative flex flex-col">
    <Header class="mb-[-72px] z-11" />

    <!-- Search Card -->
    <div class="absolute top-16 left-4 z-10">
      <SearchCard
        v-model="searchQuery"
        placeholder="ex: 'saúde para idosos', 'produtividade'"
        @search="handleSearch"
        class="w-[300px]"
      >
        <template #results>
          <div
            v-if="searchResults.length > 0"
            class="mt-2 w-full bg-[#2C2B30] border border-[#47464B] rounded-lg shadow-lg z-20 max-h-60 overflow-y-auto"
          >
            <div
              v-for="result in searchResults"
              :key="result.id"
              class="px-4 py-2 hover:bg-[#3a393e] cursor-pointer text-white text-sm"
              @click="selectSearchResult(result)"
            >
              {{ result.label }}
            </div>
          </div>
        </template>
      </SearchCard>
    </div>

    <!-- Main Canvas Area -->
    <div class="flex-1 relative">
      <ClientOnly>
        <div ref="flowContainerRef" class="vue-flow-container absolute inset-0">
          <VueFlow
            v-model:nodes="modelNodes"
            v-model:edges="modelEdges"
            :node-types="nodeTypes"
            :default-viewport="{ zoom: 0.8 }"
            :min-zoom="0.1"
            :max-zoom="4"
            :snap-to-grid="false"
            :elevate-nodes-on-select="true"
            :nodes-draggable="false"
            :nodes-connectable="false"
            :edges-updatable="false"
            :elements-selectable="false"
            :default-edge-options="{
              type: 'smoothstep',
              style: { stroke: '#6b7280', strokeWidth: 1.5 },
              animated: false,
            }"
            :node-extent="[
              [0, 0],
              [Infinity, Infinity],
            ]"
            fit-view-on-init
            class="basicflow"
            style="background-color: #0d0d12"
            @node-click="onNodeClick"
            @pane-click="onPaneClick"
          >
            <Background
              pattern-color="#393939"
              color="#292932"
              :gap="40"
              :size="3"
            />
            <Controls :show-interactive="false" />
          </VueFlow>
        </div>
        <template #fallback>
          <div class="flex items-center justify-center h-full w-full">
            <div class="loading loading-spinner loading-lg text-blue-500"></div>
          </div>
        </template>
      </ClientOnly>
    </div>
  </div>
</template>

<script setup>
import { markRaw } from "vue";
import { VueFlow } from "@vue-flow/core";
import { Background } from "@vue-flow/background";
import { Controls } from "@vue-flow/controls";
import "@vue-flow/core/dist/style.css";
import "@vue-flow/core/dist/theme-default.css";
import "@vue-flow/controls/dist/style.css";

// Components
import Header from "~/components/Header.vue";
import SearchCard from "~/components/SearchCard.vue";
import MindMapNode from "~/components/canvas/MindMapNode.vue";

// Store
import { useMindMapStore } from "~/stores/mindMapStore";

// Composable
const router = useRouter();
const user = useSupabaseUser();
const mindMapStore = useMindMapStore();

// Reactive state
const searchQuery = ref("");
const searchResults = ref([]);
const flowContainerRef = ref(null);

const modelNodes = ref([]);
const modelEdges = ref([]);

watch(
  () => mindMapStore.flowNodes,
  (val) => {
    // Always replace array reference so VueFlow receives updates
    modelNodes.value = Array.isArray(val) ? [...val] : [];
  },
  { immediate: true }
);

watch(
  () => mindMapStore.flowEdges,
  (val) => {
    modelEdges.value = Array.isArray(val) ? [...val] : [];
  },
  { immediate: true }
);

// Computed properties
const elements = computed(() => mindMapStore.elements);

const nodeTypes = {
  custom: markRaw(MindMapNode),
};

// Handle node click (supports both (event, node) and (node) signatures)
const onNodeClick = (arg1, arg2) => {
  const node = arg2 && arg2.id ? arg2 : arg1 && arg1.id ? arg1 : null;
  if (!node || !node.data) return;

  // Use data.level semantics; fallback to old data.type if present
  const level = node.data.level ?? node.data.type ?? null;
  const isRoot = !!node.data.isRoot;

  // Toggle expand/collapse when root or when node has children
  if (isRoot || (node.data.children && node.data.children.length)) {
    try {
      mindMapStore.toggleNode(node.id);
    } catch (e) {
      console.warn("onNodeClick toggle failed:", e);
    }
  }
};

// Handle pane click (background click)
const onPaneClick = () => {
  searchResults.value = [];
};

// Search functionality
const handleSearch = () => {
  if (!searchQuery.value.trim()) {
    searchResults.value = [];
    return;
  }

  const query = searchQuery.value.toLowerCase();
  const results = [];

  // Simple search implementation
  const searchNodes = (nodes) => {
    nodes.forEach((node) => {
      if (node.data?.label?.toLowerCase().includes(query)) {
        results.push({ id: node.id, label: node.data.label });
      }
      if (node.data?.children) {
        searchNodes(node.data.children);
      }
    });
  };

  searchNodes(mindMapStore.nodes);
  searchResults.value = results;
};

// Handle search result selection
const selectSearchResult = (result) => {
  // TODO: Implement search result selection
  searchQuery.value = "";
  searchResults.value = [];
};

// Redirect to login if not authenticated
onMounted(() => {
  if (process.client && !user.value) {
    router.push("/login");
  }
});
</script>

<style scoped>
.vue-flow-wrapper {
  width: 100%;
  height: 100%;
  background-color: #0d0d12;
}

.vue-flow-container {
  width: 100%;
  height: 100%;
}

:deep(.vue-flow__node) {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  cursor: grab;
}

:deep(.vue-flow__node.dragging) {
  cursor: grabbing;
  z-index: 1000;
  transform: scale(1.02);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

:deep(.vue-flow__edge-path) {
  pointer-events: none;
}
</style>
</file>

</files>
